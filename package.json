{
  "name": "coc-rls",
  "version": "1.0.3",
  "description": "Rust language support - code completion, Intellisense, refactoring, reformatting, errors, snippets. A client for the Rust Language Server, built by the RLS team.",
  "main": "lib/index.js",
  "publisher": "chemzqm",
  "engines": {
    "coc": ">=0.0.28"
  },
  "keywords": [
    "coc.nvim",
    "languageserver"
  ],
  "repository": {
    "type": "git",
    "url": "https://github.com/neoclide/coc-rls"
  },
  "bugs": "https://github.com/neoclide/coc-rls/issues",
  "scripts": {
    "clean": "rimraf lib",
    "build": "tsc -p tsconfig.json",
    "prepare": "yarn clean && yarn build"
  },
  "activationEvents": [
    "onLanguage:rust",
    "workspaceContains:Cargo.toml"
  ],
  "contributes": {
    "snippets": [
      {
        "language": "rust",
        "path": "./snippets/rust.json"
      }
    ],
    "configuration": {
      "type": "object",
      "title": "Rust configuration",
      "properties": {
        "rust-client.logToFile": {
          "type": "boolean",
          "default": false,
          "description": "When set to true, RLS stderr is logged to a file at workspace root level. Requires reloading extension after change."
        },
        "rust-client.rustupPath": {
          "type": "string",
          "default": "rustup",
          "description": "Path to rustup executable"
        },
        "rust-client.rlsPath": {
          "type": [
            "string",
            "null"
          ],
          "default": "rls",
          "description": "Path to rls executable (only required for rls developers)"
        },
        "rust-client.revealOutputChannelOn": {
          "type": "string",
          "enum": [
            "info",
            "warn",
            "error",
            "never"
          ],
          "default": "never",
          "description": "Specifies message severity on which the output channel will be revealed. Requires reloading extension after change."
        },
        "rust-client.updateOnStartup": {
          "type": "boolean",
          "default": false,
          "description": "Update the RLS whenever the extension starts up."
        },
        "rust-client.disableRustup": {
          "type": "boolean",
          "default": false,
          "description": "Disable usage of rustup and use rustc/rls from PATH."
        },
        "rust-client.channel": {
          "type": [
            "string",
            null
          ],
          "enum": [
            "stable",
            "beta",
            "nightly"
          ],
          "default": null,
          "description": "Rust channel to install RLS from. By default it will use the same channel as your currently open project"
        },
        "rust-client.rls-name": {
          "type": "string",
          "default": "rls-preview",
          "description": "Name of the RLS rustup component."
        },
        "rust.trace.server": {
          "type": "string",
          "enum": [
            "off",
            "messages",
            "verbose"
          ],
          "default": "off",
          "description": "Traces the communication between VS Code and the Java language server.",
          "scope": "window"
        },
        "rust.sysroot": {
          "type": [
            "string",
            "null"
          ],
          "default": null,
          "description": "--sysroot",
          "scope": "resource"
        },
        "rust.target": {
          "type": [
            "string",
            "null"
          ],
          "default": null,
          "description": "--target",
          "scope": "resource"
        },
        "rust.rustflags": {
          "type": [
            "string",
            "null"
          ],
          "default": null,
          "description": "Flags added to RUSTFLAGS.",
          "scope": "resource"
        },
        "rust.clear_env_rust_log": {
          "type": "boolean",
          "default": true,
          "description": "Clear the RUST_LOG environment variable before running rustc or cargo.",
          "scope": "resource"
        },
        "rust.build_lib": {
          "type": [
            "boolean",
            "null"
          ],
          "default": null,
          "description": "Specify to run analysis as if running `cargo check --lib`. Use `null` to auto-detect. (unstable)",
          "scope": "resource"
        },
        "rust.build_bin": {
          "type": [
            "string",
            "null"
          ],
          "default": null,
          "description": "Specify to run analysis as if running `cargo check --bin <name>`. Use `null` to auto-detect. (unstable)",
          "scope": "resource"
        },
        "rust.cfg_test": {
          "type": "boolean",
          "default": false,
          "description": "Build cfg(test) code. (unstable)",
          "scope": "resource"
        },
        "rust.unstable_features": {
          "type": "boolean",
          "default": false,
          "description": "Enable unstable features.",
          "scope": "resource"
        },
        "rust.wait_to_build": {
          "type": "number",
          "default": 1500,
          "description": "Time in milliseconds between receiving a change notification and starting build.",
          "scope": "resource"
        },
        "rust.show_warnings": {
          "type": "boolean",
          "default": true,
          "description": "Show warnings.",
          "scope": "resource"
        },
        "rust.use_crate_blacklist": {
          "type": "boolean",
          "default": true,
          "description": "Don't index crates on the crate blacklist.",
          "scope": "resource"
        },
        "rust.build_on_save": {
          "type": "boolean",
          "default": false,
          "description": "Only index the project when a file is saved and not on change.",
          "scope": "resource"
        },
        "rust.features": {
          "type": "array",
          "default": [],
          "description": "A list of Cargo features to enable.",
          "scope": "resource"
        },
        "rust.all_features": {
          "type": "boolean",
          "default": false,
          "description": "Enable all Cargo features.",
          "scope": "resource"
        },
        "rust.no_default_features": {
          "type": "boolean",
          "default": false,
          "description": "Do not enable default Cargo features.",
          "scope": "resource"
        },
        "rust.goto_def_racer_fallback": {
          "type": "boolean",
          "default": false,
          "description": "Use racer as a fallback for goto def.",
          "scope": "resource"
        },
        "rust.racer_completion": {
          "type": "boolean",
          "default": true,
          "description": "Enables code completion using racer.",
          "scope": "resource"
        },
        "rust.clippy_preference": {
          "type": "string",
          "enum": [
            "on",
            "opt-in",
            "off"
          ],
          "default": "opt-in",
          "description": "Controls eagerness of clippy diagnostics when available. Valid values are (case-insensitive):\n - \"off\": Disable clippy lints.\n - \"opt-in\": Clippy lints are shown when crates specify `#![warn(clippy)]`.\n - \"on\": Clippy lints enabled for all crates in workspace.\nYou need to install clippy via rustup if you haven't already.",
          "scope": "resource"
        },
        "rust.jobs": {
          "type": [
            "number",
            "null"
          ],
          "default": null,
          "description": "Number of Cargo jobs to be run in parallel.",
          "scope": "resource"
        },
        "rust.all_targets": {
          "type": "boolean",
          "default": true,
          "description": "Checks the project as if you were running cargo check --all-targets (I.e., check all targets and integration tests too).",
          "scope": "resource"
        },
        "rust.target_dir": {
          "type": [
            "string",
            "null"
          ],
          "default": null,
          "description": "When specified, it places the generated analysis files at the specified target directory. By default it is placed target/rls directory.",
          "scope": "resource"
        },
        "rust.rustfmt_path": {
          "type": [
            "string",
            "null"
          ],
          "default": null,
          "description": "When specified, RLS will use the Rustfmt pointed at the path instead of the bundled one",
          "scope": "resource"
        },
        "rust.build_command": {
          "type": [
            "string",
            "null"
          ],
          "default": null,
          "description": "EXPERIMENTAL (requires `unstable_features`)\nIf set, executes a given program responsible for rebuilding save-analysis to be loaded by the RLS. The program given should output a list of resulting .json files on stdout. \nImplies `rust.build_on_save`: true.",
          "scope": "resource"
        }
      }
    },
    "commands": [
      {
        "command": "rls.findImpls",
        "title": "Find Implementations",
        "description": "Show impl blocks for trait, struct, or enum",
        "category": "Rust"
      },
      {
        "command": "rls.update",
        "title": "Update the RLS",
        "description": "Use Rustup to update Rust, the RLS, and required data",
        "category": "Rust"
      },
      {
        "command": "rls.restart",
        "title": "Restart the RLS",
        "description": "Sometimes, it's just best to try turning it off and on again",
        "category": "Rust"
      }
    ]
  },
  "author": "chemzqm@gmail.com",
  "license": "MIT",
  "devDependencies": {
    "@chemzqm/tsconfig": "^0.0.3",
    "@chemzqm/tslint-config": "^1.0.17",
    "@types/node": "^10.12.9",
    "coc.nvim": "^0.0.32",
    "rimraf": "^2.6.2",
    "tslint": "^5.11.0",
    "typescript": "^3.1.6"
  },
  "dependencies": {
    "tslib": "^1.9.3",
    "vscode-languageserver-protocol": "^3.13.0",
    "vscode-uri": "^1.0.6"
  }
}
